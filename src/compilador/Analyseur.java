package compilador;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author pc
 */
public class Analyseur extends javax.swing.JFrame {

    public String FileInPath,Tampon,bufferIn;
        public String data ;
        public int resultadoJanelas;
        public ArrayList<String> Numero = new ArrayList<>();
        public ArrayList<String> Identificador = new ArrayList<>();
        public ArrayList<String> Operador = new ArrayList<>();
        public ArrayList<String> Separador = new ArrayList<>();
        public ArrayList<String> Palavra = new ArrayList<>();
        
        ArrayList<String> nova = new ArrayList<>();
    
    /**
     * Creates new form AnalizarLexico
     */
       
    public Analyseur() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        ButtonEffaceOut = new javax.swing.JToggleButton();
        ButtonEffaceIn = new javax.swing.JToggleButton();
        ButtonEffaceTout = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ButtonRefresh = new javax.swing.JToggleButton();
        ButtonAnalyseLex = new javax.swing.JToggleButton();
        ButtonAnalyseSynt = new javax.swing.JToggleButton();
        ButtonAjouter = new javax.swing.JToggleButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        jMenuItem3.setText("jMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Analyseur");
        setBackground(new java.awt.Color(153, 204, 255));
        setForeground(new java.awt.Color(0, 153, 153));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setFocusable(false);
        jScrollPane3.setViewportView(jTextArea2);

        ButtonEffaceOut.setBackground(new java.awt.Color(51, 204, 255));
        ButtonEffaceOut.setText("Effacer la sortie");
        ButtonEffaceOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEffaceOutActionPerformed(evt);
            }
        });

        ButtonEffaceIn.setBackground(new java.awt.Color(51, 204, 255));
        ButtonEffaceIn.setText("Effacer l'entrée");
        ButtonEffaceIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEffaceInActionPerformed(evt);
            }
        });

        ButtonEffaceTout.setBackground(new java.awt.Color(51, 204, 255));
        ButtonEffaceTout.setText("Effacer tout");
        ButtonEffaceTout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEffaceToutActionPerformed(evt);
            }
        });

        jLabel1.setText("Sortie de l'analyse (Fichier de composants de l'IHM)");

        jLabel2.setText("Programme en entrée");

        ButtonRefresh.setBackground(new java.awt.Color(51, 204, 255));
        ButtonRefresh.setText("Actualiser la sortie");
        ButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRefreshActionPerformed(evt);
            }
        });

        ButtonAnalyseLex.setBackground(new java.awt.Color(51, 204, 255));
        ButtonAnalyseLex.setText("Analyse lexicale");
        ButtonAnalyseLex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAnalyseLexActionPerformed(evt);
            }
        });

        ButtonAnalyseSynt.setBackground(new java.awt.Color(51, 204, 255));
        ButtonAnalyseSynt.setText("Analyse syntaxique");
        ButtonAnalyseSynt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAnalyseSyntActionPerformed(evt);
            }
        });

        ButtonAjouter.setBackground(new java.awt.Color(51, 204, 255));
        ButtonAjouter.setText("Ajouter fichier");
        ButtonAjouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAjouterActionPerformed(evt);
            }
        });

        jMenuBar1.setBackground(new java.awt.Color(0, 153, 153));

        jMenu1.setText("Fichier");

        jMenuItem2.setText("Ajouter fichier");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Analyse");

        jMenuItem1.setText("Analyse lexicale");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem5.setText("Analyse syntaxique et sémantique");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        jMenu5.setText("Afficher");

        jMenuItem4.setText("Afficher résultat");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem4);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 180, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ButtonEffaceOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ButtonEffaceIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ButtonEffaceTout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ButtonRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ButtonAnalyseLex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ButtonAjouter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ButtonAnalyseSynt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(237, 237, 237))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane1))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(ButtonAjouter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonEffaceIn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ButtonEffaceOut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ButtonEffaceTout)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ButtonRefresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonAnalyseLex)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ButtonAnalyseSynt)
                        .addGap(284, 284, 284))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
        Analyser();
        } catch (IOException ex) {
        Logger.getLogger(Analyseur.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JFileChooser openFile = new JFileChooser();
                openFile.showOpenDialog(openFile);
                resultadoJanelas = JFileChooser.OPEN_DIALOG;
                
                if(JFileChooser.APPROVE_OPTION == resultadoJanelas){
                          FileInPath = openFile.getSelectedFile().toString();
                          OpenFile();
                }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void ButtonEffaceOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEffaceOutActionPerformed
       
       jTextArea2.setText("");
    }//GEN-LAST:event_ButtonEffaceOutActionPerformed

    private void ButtonEffaceInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEffaceInActionPerformed
        jTextArea1.setText("");
    }//GEN-LAST:event_ButtonEffaceInActionPerformed

    private void ButtonEffaceToutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEffaceToutActionPerformed
        jTextArea1.setText("");
        jTextArea2.setText("");
    }//GEN-LAST:event_ButtonEffaceToutActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
       try {
        AnalyseLexicale();
        } catch (IOException ex) {
        Logger.getLogger(Analyseur.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void ButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRefreshActionPerformed
       jTextArea2.setText("");
       
    }//GEN-LAST:event_ButtonRefreshActionPerformed

    private void ButtonAnalyseLexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAnalyseLexActionPerformed
        try {
        AnalyseLexicale();
        } catch (IOException ex) {
        Logger.getLogger(Analyseur.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonAnalyseLexActionPerformed

    private void ButtonAnalyseSyntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAnalyseSyntActionPerformed
        try {
        Analyser();
        } catch (IOException ex) {
        Logger.getLogger(Analyseur.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonAnalyseSyntActionPerformed

    private void ButtonAjouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAjouterActionPerformed
        JFileChooser openFile = new JFileChooser();
                openFile.showOpenDialog(openFile);
                resultadoJanelas = JFileChooser.OPEN_DIALOG;
                
                if(JFileChooser.APPROVE_OPTION == resultadoJanelas){
                          FileInPath = openFile.getSelectedFile().toString();
                          OpenFile();
                }
    }//GEN-LAST:event_ButtonAjouterActionPerformed

    private void OpenFile(){
                 try{
                          System.out.println("fich: "+FileInPath);
                          FileReader fileReader = new FileReader(FileInPath);
                          BufferedReader reader = new BufferedReader(fileReader);
                          while((data = reader.readLine()) != null){
                                 jTextArea1.append(data+"\n");
                         }
                         fileReader.close();
                         reader.close();
                 }
                 catch(Exception erro){
                         JOptionPane.showMessageDialog(null, erro.getMessage());
                 }
         }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Analyseur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Analyseur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Analyseur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Analyseur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Analyseur().setVisible(true);
            }
        });
    }



static ArrayList<String> nova2;

     public static void Lista(ArrayList<String> nova){
            //System.out.println(nova);
            nova2 = nova;
        }
    Scanner_1 scanner;
    Scanner_1 parser;
    int i;
    boolean ms = false;
    boolean debug = false;
    
    private void Analyser() throws IOException{
                 ArrayList<Composant> compos;
                 Automate aut;
                 interafc ini;
                 ArrayList<propiete> propos;
                 propiete p;
                 Tampon =  System.getProperty("java.io.tmpdir")+"temp.txt";
                 File arquivo = new File(Tampon);  
                 FileWriter fw = new FileWriter(arquivo);  
                 BufferedWriter bw = new BufferedWriter(fw);      
                 bw.write(jTextArea1.getText());  
                 bw.flush();  
                 bw.close(); 
                                
                 String nomeArq = new String (Tampon);
                 
//Instanciation de l'analyseur syntaxique et sémantique
Scanner_1 AFComposer = new Scanner_1(new FileInputStream(nomeArq));
String args[] = null;
try {
AnalyseLexicale();
//La table des composants de l'IHM manipulé
ini = AFComposer.Prog();
compos = ini.getCompos();
aut = ini.getAut();
JOptionPane.showMessageDialog(null, "L'analyse du fichier a terminé avec success");
PrintWriter writer = new PrintWriter("Composants.gui", "UTF-8");
for(int i=0; i<compos.size(); i++)
{
writer.println("Composant "+(i+1)+" :");
jTextArea2.append("Composant "+(i+1)+" :\n");
writer.println("  Nom du Composant : "+compos.get(i).getNom());
jTextArea2.append("  Nom du Composant : "+compos.get(i).getNom()+"\n");
writer.println("  Type du Composant : "+compos.get(i).getType());
jTextArea2.append("  Type du Composant : "+compos.get(i).getType()+"\n");
writer.println("  Container du composant : "+compos.get(i).getContainer());
jTextArea2.append("  Container du composant : "+compos.get(i).getContainer()+"\n");
writer.println("  Liste des Propriétés du composant :");
jTextArea2.append("  Liste des Propriétés du composant :\n");
propos = compos.get(i).getProps();
for(int j=0; j<propos.size(); j++)
{
    p = propos.get(j); 
    writer.print("   {");
    jTextArea2.append("   {");
    for(int k=0; k<p.getNom().size(); k++){
    writer.print(p.getNom().get(k)+", "); 
    jTextArea2.append(p.getNom().get(k)+", ");
    }
    writer.println("} : "+p.getType()); 
    jTextArea2.append("} : "+p.getType()+"\n");
}
writer.println("  Liste des évenements du composant :");
jTextArea2.append("  Liste des évenements du composant :\n");
for(int j=0; j<compos.get(i).getEvents().size(); j++)
{
    writer.println("    "+compos.get(i).getEvents().get(j)); 
    jTextArea2.append("    "+compos.get(i).getEvents().get(j)+"\n");
}
writer.println("");
jTextArea2.append("\n");
}
writer.close();

int k=0;
PrintWriter writer2 = new PrintWriter("Automate.aef", "UTF-8");
Liste l ;
for(int i=0; i<128; i++)
{
    writer2.println("Etat: "+i+" |");
    for(int j=0; j<128; j++)
    {
      writer2.print(" {");
      l = aut.delta[i][j];  
      if(l!=null){
      while(k!=1)
      {      
         writer2.print(+l.val+" ,");   
         if(l.suivant==null)
         {
             k=1;
         }
         else
         {
             l = l.suivant;
         }
      }
      }
      writer2.print(" }");  
      k=0;
    }
    writer2.print("\n");
}
writer.close();

}

catch (Exception e)
{
JOptionPane.showMessageDialog(null, "Il y a un erreur syntaxique!");
System.out.println("Erreur de Token.");
System.out.println(e.getMessage()+"MAIS");
e.printStackTrace();
}
catch (Error e)
{
System.out.println(e.getMessage());
}
                 
        }
     private void AnalyseLexicale() throws IOException{
                
                 Tampon =  System.getProperty("java.io.tmpdir")+"temp.txt";
                 File arquivo = new File(Tampon);  
                 FileWriter fw = new FileWriter(arquivo);  
                 BufferedWriter bw = new BufferedWriter(fw);      
                 bw.write(jTextArea1.getText());  
                 bw.flush();  
                 bw.close(); 
                 
      
                 
                 String nomeArq = new String (Tampon);
Scanner_1 lex = new Scanner_1(new FileInputStream(nomeArq));
String args[] = null;
          
try {
lex.processa(); //L'analyseur lexical 

}

catch (Exception e)
{
JOptionPane.showMessageDialog(null, "Analise Sintaxica NOT OK");
System.out.println("Erro de Token.");

e.printStackTrace();
}
catch (Error e)
{
System.out.println(e.getMessage());
}     
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton ButtonAjouter;
    private javax.swing.JToggleButton ButtonAnalyseLex;
    private javax.swing.JToggleButton ButtonAnalyseSynt;
    private javax.swing.JToggleButton ButtonEffaceIn;
    private javax.swing.JToggleButton ButtonEffaceOut;
    private javax.swing.JToggleButton ButtonEffaceTout;
    private javax.swing.JToggleButton ButtonRefresh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
